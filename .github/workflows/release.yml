name: release

on:
  push:
    branches:
      - release/*

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/upload-artifact@v3
        with:
          name: release
          path: .
      - name: get_latest_release_title
        run: |
          CURRENT_VERSION=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/igorek993/release-process-test/releases/latest | jq .name | sed 's/^"\|"$//g')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          NEW_VERSION=$(echo "$GITHUB_REF" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo $GITHUB_ENV
          if dpkg --compare-versions "$CURRENT_VERSION" lt "$NEW_VERSION"; then
              echo "$CURRENT_VERSION is less than $NEW_VERSION"
              echo "UPDATE=true" >> $GITHUB_ENV
          else
              echo "$CURRENT_VERSION is greater than or equal to $NEW_VERSION"
              echo "UPDATE=false" >> $GITHUB_ENV
          fi
      - name: test
        run: |
          echo env.UPDATE
          echo env.NEW_VERSION
          echo env.CURRENT_VERSION
      - uses: "marvinpinto/action-automatic-releases@latest"
        if: ${{ env.UPDATE==true }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: latest
          title: ${{ env.NEW_VERSION }}
          files: release

# name: release

# on:
#   push:
#     branches:
#       - release/*

# jobs:
#   release:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - uses: actions/upload-artifact@v3
#         with:
#           name: release
#           path: .
#       - id: latest_release_version
#         uses: pozetroninc/github-action-get-latest-release@master
#         with:
#           repository: igorek993/release-process-test
#       - id: compare_versions
#         run: |
#           # Get the current version from the branch name
#           CURRENT_VERSION=$(echo "$GITHUB_REF" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
#           echo $GITHUB_REF
#           echo HERE
#           echo $CURRENT_VERSION
#           echo HERE2
#           # Get the latest version from the output of the get-latest-release action
#           # LATEST_VERSION=${{ steps.latest_release_version.outputs.release }}
#           LATEST_VERSION=8.0.0
#           echo "$LATEST_VERSION"
#           echo HERE3
#           NEW_TAG="latest"
#           # Check if the current version is higher than the latest version
#           # if [[ "$CURRENT_VERSION" > "$LATEST_VERSION" ]]; then
#           #   # Tag the new release with the latest version
#           #   echo HERE4
#           #   NEW_TAG="latest"
#           #   TITLE=$CURRENT_VERSION
#           # else
#           #   # Don't tag the new release
#           #   NEW_TAG=""
#           # fi
#       - uses: "marvinpinto/action-automatic-releases@latest"
#         # if: steps.compare_versions.outputs.NEW_TAG == 'latest'
#         with:
#           repo_token: "${{ secrets.GITHUB_TOKEN }}"
#           automatic_release_tag: "${{ steps.compare_versions.outputs.NEW_TAG }}"
#           title: "${{ steps.compare_versions.outputs.CURRENT_VERSION }}"
#           prerelease: false
#           files: release
